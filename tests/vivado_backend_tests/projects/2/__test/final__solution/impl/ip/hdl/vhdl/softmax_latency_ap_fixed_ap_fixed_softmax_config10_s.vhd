-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity softmax_latency_ap_fixed_ap_fixed_softmax_config10_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    data_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_2_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_3_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_4_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_5_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_6_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_7_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_8_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_9_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_10_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_11_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_12_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_13_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_14_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_15_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_16_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_17_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_18_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_19_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_20_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_21_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    data_22_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return_0 : OUT STD_LOGIC_VECTOR (33 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (33 downto 0);
    ap_return_2 : OUT STD_LOGIC_VECTOR (33 downto 0);
    ap_return_3 : OUT STD_LOGIC_VECTOR (33 downto 0);
    ap_return_4 : OUT STD_LOGIC_VECTOR (33 downto 0);
    ap_return_5 : OUT STD_LOGIC_VECTOR (33 downto 0);
    ap_return_6 : OUT STD_LOGIC_VECTOR (33 downto 0);
    ap_return_7 : OUT STD_LOGIC_VECTOR (33 downto 0);
    ap_return_8 : OUT STD_LOGIC_VECTOR (33 downto 0);
    ap_return_9 : OUT STD_LOGIC_VECTOR (33 downto 0);
    ap_return_10 : OUT STD_LOGIC_VECTOR (33 downto 0);
    ap_return_11 : OUT STD_LOGIC_VECTOR (33 downto 0);
    ap_return_12 : OUT STD_LOGIC_VECTOR (33 downto 0);
    ap_return_13 : OUT STD_LOGIC_VECTOR (33 downto 0);
    ap_return_14 : OUT STD_LOGIC_VECTOR (33 downto 0);
    ap_return_15 : OUT STD_LOGIC_VECTOR (33 downto 0);
    ap_return_16 : OUT STD_LOGIC_VECTOR (33 downto 0);
    ap_return_17 : OUT STD_LOGIC_VECTOR (33 downto 0);
    ap_return_18 : OUT STD_LOGIC_VECTOR (33 downto 0);
    ap_return_19 : OUT STD_LOGIC_VECTOR (33 downto 0);
    ap_return_20 : OUT STD_LOGIC_VECTOR (33 downto 0);
    ap_return_21 : OUT STD_LOGIC_VECTOR (33 downto 0);
    ap_return_22 : OUT STD_LOGIC_VECTOR (33 downto 0) );
end;


architecture behav of softmax_latency_ap_fixed_ap_fixed_softmax_config10_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exp_table1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce0 : STD_LOGIC;
    signal exp_table1_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce1 : STD_LOGIC;
    signal exp_table1_q1 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table1_address2 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce2 : STD_LOGIC;
    signal exp_table1_q2 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table1_address3 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce3 : STD_LOGIC;
    signal exp_table1_q3 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table1_address4 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce4 : STD_LOGIC;
    signal exp_table1_q4 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table1_address5 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce5 : STD_LOGIC;
    signal exp_table1_q5 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table1_address6 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce6 : STD_LOGIC;
    signal exp_table1_q6 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table1_address7 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce7 : STD_LOGIC;
    signal exp_table1_q7 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table1_address8 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce8 : STD_LOGIC;
    signal exp_table1_q8 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table1_address9 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce9 : STD_LOGIC;
    signal exp_table1_q9 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table1_address10 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce10 : STD_LOGIC;
    signal exp_table1_q10 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table1_address11 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce11 : STD_LOGIC;
    signal exp_table1_q11 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table1_address12 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce12 : STD_LOGIC;
    signal exp_table1_q12 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table1_address13 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce13 : STD_LOGIC;
    signal exp_table1_q13 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table1_address14 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce14 : STD_LOGIC;
    signal exp_table1_q14 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table1_address15 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce15 : STD_LOGIC;
    signal exp_table1_q15 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table1_address16 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce16 : STD_LOGIC;
    signal exp_table1_q16 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table1_address17 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce17 : STD_LOGIC;
    signal exp_table1_q17 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table1_address18 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce18 : STD_LOGIC;
    signal exp_table1_q18 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table1_address19 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce19 : STD_LOGIC;
    signal exp_table1_q19 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table1_address20 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce20 : STD_LOGIC;
    signal exp_table1_q20 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table1_address21 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce21 : STD_LOGIC;
    signal exp_table1_q21 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_table1_address22 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_table1_ce22 : STD_LOGIC;
    signal exp_table1_q22 : STD_LOGIC_VECTOR (17 downto 0);
    signal invert_table2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal invert_table2_ce0 : STD_LOGIC;
    signal invert_table2_q0 : STD_LOGIC_VECTOR (17 downto 0);
    signal y_V_reg_1324 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_1_reg_1329 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_2_reg_1334 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_3_reg_1339 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_6_reg_1354 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_7_reg_1359 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_8_reg_1364 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_9_reg_1369 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_10_reg_1374 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_11_reg_1379 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_12_reg_1384 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_13_reg_1389 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_14_reg_1394 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_15_reg_1399 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_21_reg_1429 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_22_reg_1434 : STD_LOGIC_VECTOR (9 downto 0);
    signal exp_res_4_V_reg_1459 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_4_V_reg_1459_pp0_iter2_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_5_V_reg_1465 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_5_V_reg_1465_pp0_iter2_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_16_V_reg_1521 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_16_V_reg_1521_pp0_iter2_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_17_V_reg_1527 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_17_V_reg_1527_pp0_iter2_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_18_V_reg_1533 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_18_V_reg_1533_pp0_iter2_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_19_V_reg_1539 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_19_V_reg_1539_pp0_iter2_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_20_V_reg_1545 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_20_V_reg_1545_pp0_iter2_reg : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_0_V_reg_1561 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_1_V_reg_1566 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_2_V_reg_1571 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_3_V_reg_1576 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_6_V_reg_1581 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_7_V_reg_1586 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_8_V_reg_1591 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_9_V_reg_1596 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_10_V_reg_1601 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_11_V_reg_1606 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_12_V_reg_1611 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_13_V_reg_1616 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_14_V_reg_1621 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_15_V_reg_1626 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_21_V_reg_1631 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_res_22_V_reg_1636 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal zext_ln251_4_fu_556_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_5_fu_571_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_16_fu_686_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_17_fu_701_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_18_fu_716_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_19_fu_731_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_20_fu_746_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_fu_771_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_1_fu_775_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_2_fu_779_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_3_fu_783_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_6_fu_787_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_7_fu_791_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_8_fu_795_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_9_fu_799_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_10_fu_803_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_11_fu_807_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_12_fu_811_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_13_fu_815_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_14_fu_819_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_15_fu_823_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_21_fu_827_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln251_22_fu_831_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln259_fu_970_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal y_V_4_fu_546_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_5_fu_561_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_16_fu_676_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_17_fu_691_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_18_fu_706_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_19_fu_721_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal y_V_20_fu_736_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln703_fu_835_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_fu_835_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_1_fu_841_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_1_fu_841_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_1_fu_841_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_2_fu_847_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_2_fu_847_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_fu_835_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_4_fu_859_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_5_fu_863_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_6_fu_869_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_6_fu_869_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_6_fu_869_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_7_fu_875_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_7_fu_875_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_5_fu_863_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_8_fu_881_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_3_fu_853_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_10_fu_893_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_10_fu_893_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_10_fu_893_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_11_fu_899_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_12_fu_905_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_12_fu_905_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_12_fu_905_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_13_fu_911_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_13_fu_911_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_11_fu_899_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_15_fu_923_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_16_fu_927_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_17_fu_933_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_18_fu_937_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_16_fu_927_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_19_fu_942_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_14_fu_917_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_20_fu_948_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal add_ln703_9_fu_887_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal exp_sum_V_fu_954_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal y_V_23_fu_960_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln703_fu_1163_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln703_1_fu_1170_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln703_2_fu_1177_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln703_3_fu_1184_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln703_4_fu_1191_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln703_5_fu_1198_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln703_6_fu_1205_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln703_7_fu_1212_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln703_8_fu_1219_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln703_9_fu_1226_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln703_10_fu_1233_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln703_11_fu_1240_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln703_12_fu_1247_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln703_13_fu_1254_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln703_14_fu_1261_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln703_15_fu_1268_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln703_16_fu_1275_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln703_17_fu_1282_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln703_18_fu_1289_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln703_19_fu_1296_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln703_20_fu_1303_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln703_21_fu_1310_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln703_22_fu_1317_p2 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln703_fu_1163_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal sext_ln703_fu_975_p1 : STD_LOGIC_VECTOR (33 downto 0);
    signal mul_ln703_1_fu_1170_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln703_2_fu_1177_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln703_3_fu_1184_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln703_4_fu_1191_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln703_5_fu_1198_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln703_6_fu_1205_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln703_7_fu_1212_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln703_8_fu_1219_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln703_9_fu_1226_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln703_10_fu_1233_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln703_11_fu_1240_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln703_12_fu_1247_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln703_13_fu_1254_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln703_14_fu_1261_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln703_15_fu_1268_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln703_16_fu_1275_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln703_17_fu_1282_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln703_18_fu_1289_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln703_19_fu_1296_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln703_20_fu_1303_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln703_21_fu_1310_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal mul_ln703_22_fu_1317_p0 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component myproject_mul_mul_18s_18s_34_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (33 downto 0) );
    end component;


    component softmax_latency_ap_fixed_ap_fixed_softmax_config10_s_exp_bkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address2 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address3 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address4 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce4 : IN STD_LOGIC;
        q4 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address5 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce5 : IN STD_LOGIC;
        q5 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address6 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce6 : IN STD_LOGIC;
        q6 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address7 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce7 : IN STD_LOGIC;
        q7 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address8 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce8 : IN STD_LOGIC;
        q8 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address9 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce9 : IN STD_LOGIC;
        q9 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address10 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce10 : IN STD_LOGIC;
        q10 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address11 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce11 : IN STD_LOGIC;
        q11 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address12 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce12 : IN STD_LOGIC;
        q12 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address13 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce13 : IN STD_LOGIC;
        q13 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address14 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce14 : IN STD_LOGIC;
        q14 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address15 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce15 : IN STD_LOGIC;
        q15 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address16 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce16 : IN STD_LOGIC;
        q16 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address17 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce17 : IN STD_LOGIC;
        q17 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address18 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce18 : IN STD_LOGIC;
        q18 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address19 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce19 : IN STD_LOGIC;
        q19 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address20 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce20 : IN STD_LOGIC;
        q20 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address21 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce21 : IN STD_LOGIC;
        q21 : OUT STD_LOGIC_VECTOR (17 downto 0);
        address22 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce22 : IN STD_LOGIC;
        q22 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;


    component softmax_latency_ap_fixed_ap_fixed_softmax_config10_s_invecud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (17 downto 0) );
    end component;



begin
    exp_table1_U : component softmax_latency_ap_fixed_ap_fixed_softmax_config10_s_exp_bkb
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => exp_table1_address0,
        ce0 => exp_table1_ce0,
        q0 => exp_table1_q0,
        address1 => exp_table1_address1,
        ce1 => exp_table1_ce1,
        q1 => exp_table1_q1,
        address2 => exp_table1_address2,
        ce2 => exp_table1_ce2,
        q2 => exp_table1_q2,
        address3 => exp_table1_address3,
        ce3 => exp_table1_ce3,
        q3 => exp_table1_q3,
        address4 => exp_table1_address4,
        ce4 => exp_table1_ce4,
        q4 => exp_table1_q4,
        address5 => exp_table1_address5,
        ce5 => exp_table1_ce5,
        q5 => exp_table1_q5,
        address6 => exp_table1_address6,
        ce6 => exp_table1_ce6,
        q6 => exp_table1_q6,
        address7 => exp_table1_address7,
        ce7 => exp_table1_ce7,
        q7 => exp_table1_q7,
        address8 => exp_table1_address8,
        ce8 => exp_table1_ce8,
        q8 => exp_table1_q8,
        address9 => exp_table1_address9,
        ce9 => exp_table1_ce9,
        q9 => exp_table1_q9,
        address10 => exp_table1_address10,
        ce10 => exp_table1_ce10,
        q10 => exp_table1_q10,
        address11 => exp_table1_address11,
        ce11 => exp_table1_ce11,
        q11 => exp_table1_q11,
        address12 => exp_table1_address12,
        ce12 => exp_table1_ce12,
        q12 => exp_table1_q12,
        address13 => exp_table1_address13,
        ce13 => exp_table1_ce13,
        q13 => exp_table1_q13,
        address14 => exp_table1_address14,
        ce14 => exp_table1_ce14,
        q14 => exp_table1_q14,
        address15 => exp_table1_address15,
        ce15 => exp_table1_ce15,
        q15 => exp_table1_q15,
        address16 => exp_table1_address16,
        ce16 => exp_table1_ce16,
        q16 => exp_table1_q16,
        address17 => exp_table1_address17,
        ce17 => exp_table1_ce17,
        q17 => exp_table1_q17,
        address18 => exp_table1_address18,
        ce18 => exp_table1_ce18,
        q18 => exp_table1_q18,
        address19 => exp_table1_address19,
        ce19 => exp_table1_ce19,
        q19 => exp_table1_q19,
        address20 => exp_table1_address20,
        ce20 => exp_table1_ce20,
        q20 => exp_table1_q20,
        address21 => exp_table1_address21,
        ce21 => exp_table1_ce21,
        q21 => exp_table1_q21,
        address22 => exp_table1_address22,
        ce22 => exp_table1_ce22,
        q22 => exp_table1_q22);

    invert_table2_U : component softmax_latency_ap_fixed_ap_fixed_softmax_config10_s_invecud
    generic map (
        DataWidth => 18,
        AddressRange => 1024,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => invert_table2_address0,
        ce0 => invert_table2_ce0,
        q0 => invert_table2_q0);

    myproject_mul_mul_18s_18s_34_1_1_U194 : component myproject_mul_mul_18s_18s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln703_fu_1163_p0,
        din1 => exp_res_0_V_reg_1561,
        dout => mul_ln703_fu_1163_p2);

    myproject_mul_mul_18s_18s_34_1_1_U195 : component myproject_mul_mul_18s_18s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln703_1_fu_1170_p0,
        din1 => exp_res_1_V_reg_1566,
        dout => mul_ln703_1_fu_1170_p2);

    myproject_mul_mul_18s_18s_34_1_1_U196 : component myproject_mul_mul_18s_18s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln703_2_fu_1177_p0,
        din1 => exp_res_2_V_reg_1571,
        dout => mul_ln703_2_fu_1177_p2);

    myproject_mul_mul_18s_18s_34_1_1_U197 : component myproject_mul_mul_18s_18s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln703_3_fu_1184_p0,
        din1 => exp_res_3_V_reg_1576,
        dout => mul_ln703_3_fu_1184_p2);

    myproject_mul_mul_18s_18s_34_1_1_U198 : component myproject_mul_mul_18s_18s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln703_4_fu_1191_p0,
        din1 => exp_res_4_V_reg_1459_pp0_iter2_reg,
        dout => mul_ln703_4_fu_1191_p2);

    myproject_mul_mul_18s_18s_34_1_1_U199 : component myproject_mul_mul_18s_18s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln703_5_fu_1198_p0,
        din1 => exp_res_5_V_reg_1465_pp0_iter2_reg,
        dout => mul_ln703_5_fu_1198_p2);

    myproject_mul_mul_18s_18s_34_1_1_U200 : component myproject_mul_mul_18s_18s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln703_6_fu_1205_p0,
        din1 => exp_res_6_V_reg_1581,
        dout => mul_ln703_6_fu_1205_p2);

    myproject_mul_mul_18s_18s_34_1_1_U201 : component myproject_mul_mul_18s_18s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln703_7_fu_1212_p0,
        din1 => exp_res_7_V_reg_1586,
        dout => mul_ln703_7_fu_1212_p2);

    myproject_mul_mul_18s_18s_34_1_1_U202 : component myproject_mul_mul_18s_18s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln703_8_fu_1219_p0,
        din1 => exp_res_8_V_reg_1591,
        dout => mul_ln703_8_fu_1219_p2);

    myproject_mul_mul_18s_18s_34_1_1_U203 : component myproject_mul_mul_18s_18s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln703_9_fu_1226_p0,
        din1 => exp_res_9_V_reg_1596,
        dout => mul_ln703_9_fu_1226_p2);

    myproject_mul_mul_18s_18s_34_1_1_U204 : component myproject_mul_mul_18s_18s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln703_10_fu_1233_p0,
        din1 => exp_res_10_V_reg_1601,
        dout => mul_ln703_10_fu_1233_p2);

    myproject_mul_mul_18s_18s_34_1_1_U205 : component myproject_mul_mul_18s_18s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln703_11_fu_1240_p0,
        din1 => exp_res_11_V_reg_1606,
        dout => mul_ln703_11_fu_1240_p2);

    myproject_mul_mul_18s_18s_34_1_1_U206 : component myproject_mul_mul_18s_18s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln703_12_fu_1247_p0,
        din1 => exp_res_12_V_reg_1611,
        dout => mul_ln703_12_fu_1247_p2);

    myproject_mul_mul_18s_18s_34_1_1_U207 : component myproject_mul_mul_18s_18s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln703_13_fu_1254_p0,
        din1 => exp_res_13_V_reg_1616,
        dout => mul_ln703_13_fu_1254_p2);

    myproject_mul_mul_18s_18s_34_1_1_U208 : component myproject_mul_mul_18s_18s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln703_14_fu_1261_p0,
        din1 => exp_res_14_V_reg_1621,
        dout => mul_ln703_14_fu_1261_p2);

    myproject_mul_mul_18s_18s_34_1_1_U209 : component myproject_mul_mul_18s_18s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln703_15_fu_1268_p0,
        din1 => exp_res_15_V_reg_1626,
        dout => mul_ln703_15_fu_1268_p2);

    myproject_mul_mul_18s_18s_34_1_1_U210 : component myproject_mul_mul_18s_18s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln703_16_fu_1275_p0,
        din1 => exp_res_16_V_reg_1521_pp0_iter2_reg,
        dout => mul_ln703_16_fu_1275_p2);

    myproject_mul_mul_18s_18s_34_1_1_U211 : component myproject_mul_mul_18s_18s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln703_17_fu_1282_p0,
        din1 => exp_res_17_V_reg_1527_pp0_iter2_reg,
        dout => mul_ln703_17_fu_1282_p2);

    myproject_mul_mul_18s_18s_34_1_1_U212 : component myproject_mul_mul_18s_18s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln703_18_fu_1289_p0,
        din1 => exp_res_18_V_reg_1533_pp0_iter2_reg,
        dout => mul_ln703_18_fu_1289_p2);

    myproject_mul_mul_18s_18s_34_1_1_U213 : component myproject_mul_mul_18s_18s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln703_19_fu_1296_p0,
        din1 => exp_res_19_V_reg_1539_pp0_iter2_reg,
        dout => mul_ln703_19_fu_1296_p2);

    myproject_mul_mul_18s_18s_34_1_1_U214 : component myproject_mul_mul_18s_18s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln703_20_fu_1303_p0,
        din1 => exp_res_20_V_reg_1545_pp0_iter2_reg,
        dout => mul_ln703_20_fu_1303_p2);

    myproject_mul_mul_18s_18s_34_1_1_U215 : component myproject_mul_mul_18s_18s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln703_21_fu_1310_p0,
        din1 => exp_res_21_V_reg_1631,
        dout => mul_ln703_21_fu_1310_p2);

    myproject_mul_mul_18s_18s_34_1_1_U216 : component myproject_mul_mul_18s_18s_34_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 34)
    port map (
        din0 => mul_ln703_22_fu_1317_p0,
        din1 => exp_res_22_V_reg_1636,
        dout => mul_ln703_22_fu_1317_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                exp_res_0_V_reg_1561 <= exp_table1_q7;
                exp_res_10_V_reg_1601 <= exp_table1_q15;
                exp_res_11_V_reg_1606 <= exp_table1_q16;
                exp_res_12_V_reg_1611 <= exp_table1_q17;
                exp_res_13_V_reg_1616 <= exp_table1_q18;
                exp_res_14_V_reg_1621 <= exp_table1_q19;
                exp_res_15_V_reg_1626 <= exp_table1_q20;
                exp_res_1_V_reg_1566 <= exp_table1_q8;
                exp_res_21_V_reg_1631 <= exp_table1_q21;
                exp_res_22_V_reg_1636 <= exp_table1_q22;
                exp_res_2_V_reg_1571 <= exp_table1_q9;
                exp_res_3_V_reg_1576 <= exp_table1_q10;
                exp_res_6_V_reg_1581 <= exp_table1_q11;
                exp_res_7_V_reg_1586 <= exp_table1_q12;
                exp_res_8_V_reg_1591 <= exp_table1_q13;
                exp_res_9_V_reg_1596 <= exp_table1_q14;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exp_res_16_V_reg_1521 <= exp_table1_q2;
                exp_res_17_V_reg_1527 <= exp_table1_q3;
                exp_res_18_V_reg_1533 <= exp_table1_q4;
                exp_res_19_V_reg_1539 <= exp_table1_q5;
                exp_res_20_V_reg_1545 <= exp_table1_q6;
                exp_res_4_V_reg_1459 <= exp_table1_q0;
                exp_res_5_V_reg_1465 <= exp_table1_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exp_res_16_V_reg_1521_pp0_iter2_reg <= exp_res_16_V_reg_1521;
                exp_res_17_V_reg_1527_pp0_iter2_reg <= exp_res_17_V_reg_1527;
                exp_res_18_V_reg_1533_pp0_iter2_reg <= exp_res_18_V_reg_1533;
                exp_res_19_V_reg_1539_pp0_iter2_reg <= exp_res_19_V_reg_1539;
                exp_res_20_V_reg_1545_pp0_iter2_reg <= exp_res_20_V_reg_1545;
                exp_res_4_V_reg_1459_pp0_iter2_reg <= exp_res_4_V_reg_1459;
                exp_res_5_V_reg_1465_pp0_iter2_reg <= exp_res_5_V_reg_1465;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                y_V_10_reg_1374 <= data_10_V_read(15 downto 6);
                y_V_11_reg_1379 <= data_11_V_read(15 downto 6);
                y_V_12_reg_1384 <= data_12_V_read(15 downto 6);
                y_V_13_reg_1389 <= data_13_V_read(15 downto 6);
                y_V_14_reg_1394 <= data_14_V_read(15 downto 6);
                y_V_15_reg_1399 <= data_15_V_read(15 downto 6);
                y_V_1_reg_1329 <= data_1_V_read(15 downto 6);
                y_V_21_reg_1429 <= data_21_V_read(15 downto 6);
                y_V_22_reg_1434 <= data_22_V_read(15 downto 6);
                y_V_2_reg_1334 <= data_2_V_read(15 downto 6);
                y_V_3_reg_1339 <= data_3_V_read(15 downto 6);
                y_V_6_reg_1354 <= data_6_V_read(15 downto 6);
                y_V_7_reg_1359 <= data_7_V_read(15 downto 6);
                y_V_8_reg_1364 <= data_8_V_read(15 downto 6);
                y_V_9_reg_1369 <= data_9_V_read(15 downto 6);
                y_V_reg_1324 <= data_0_V_read(15 downto 6);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln703_10_fu_893_p0 <= exp_table1_q16;
    add_ln703_10_fu_893_p1 <= exp_table1_q15;
    add_ln703_10_fu_893_p2 <= std_logic_vector(signed(add_ln703_10_fu_893_p0) + signed(add_ln703_10_fu_893_p1));
    add_ln703_11_fu_899_p1 <= exp_table1_q17;
    add_ln703_11_fu_899_p2 <= std_logic_vector(unsigned(add_ln703_10_fu_893_p2) + unsigned(add_ln703_11_fu_899_p1));
    add_ln703_12_fu_905_p0 <= exp_table1_q13;
    add_ln703_12_fu_905_p1 <= exp_table1_q22;
    add_ln703_12_fu_905_p2 <= std_logic_vector(signed(add_ln703_12_fu_905_p0) + signed(add_ln703_12_fu_905_p1));
    add_ln703_13_fu_911_p1 <= exp_table1_q14;
    add_ln703_13_fu_911_p2 <= std_logic_vector(unsigned(add_ln703_12_fu_905_p2) + unsigned(add_ln703_13_fu_911_p1));
    add_ln703_14_fu_917_p2 <= std_logic_vector(unsigned(add_ln703_13_fu_911_p2) + unsigned(add_ln703_11_fu_899_p2));
    add_ln703_15_fu_923_p2 <= std_logic_vector(signed(exp_res_20_V_reg_1545) + signed(exp_res_19_V_reg_1539));
    add_ln703_16_fu_927_p1 <= exp_table1_q21;
    add_ln703_16_fu_927_p2 <= std_logic_vector(unsigned(add_ln703_15_fu_923_p2) + unsigned(add_ln703_16_fu_927_p1));
    add_ln703_17_fu_933_p2 <= std_logic_vector(signed(exp_res_17_V_reg_1527) + signed(exp_res_16_V_reg_1521));
    add_ln703_18_fu_937_p2 <= std_logic_vector(unsigned(add_ln703_17_fu_933_p2) + unsigned(exp_res_18_V_reg_1533));
    add_ln703_19_fu_942_p2 <= std_logic_vector(unsigned(add_ln703_18_fu_937_p2) + unsigned(add_ln703_16_fu_927_p2));
    add_ln703_1_fu_841_p0 <= exp_table1_q9;
    add_ln703_1_fu_841_p1 <= exp_table1_q12;
    add_ln703_1_fu_841_p2 <= std_logic_vector(signed(add_ln703_1_fu_841_p0) + signed(add_ln703_1_fu_841_p1));
    add_ln703_20_fu_948_p2 <= std_logic_vector(unsigned(add_ln703_19_fu_942_p2) + unsigned(add_ln703_14_fu_917_p2));
    add_ln703_2_fu_847_p1 <= exp_table1_q10;
    add_ln703_2_fu_847_p2 <= std_logic_vector(unsigned(add_ln703_1_fu_841_p2) + unsigned(add_ln703_2_fu_847_p1));
    add_ln703_3_fu_853_p2 <= std_logic_vector(unsigned(add_ln703_2_fu_847_p2) + unsigned(add_ln703_fu_835_p2));
    add_ln703_4_fu_859_p2 <= std_logic_vector(signed(exp_res_5_V_reg_1465) + signed(exp_res_4_V_reg_1459));
    add_ln703_5_fu_863_p1 <= exp_table1_q11;
    add_ln703_5_fu_863_p2 <= std_logic_vector(unsigned(add_ln703_4_fu_859_p2) + unsigned(add_ln703_5_fu_863_p1));
    add_ln703_6_fu_869_p0 <= exp_table1_q19;
    add_ln703_6_fu_869_p1 <= exp_table1_q18;
    add_ln703_6_fu_869_p2 <= std_logic_vector(signed(add_ln703_6_fu_869_p0) + signed(add_ln703_6_fu_869_p1));
    add_ln703_7_fu_875_p1 <= exp_table1_q20;
    add_ln703_7_fu_875_p2 <= std_logic_vector(unsigned(add_ln703_6_fu_869_p2) + unsigned(add_ln703_7_fu_875_p1));
    add_ln703_8_fu_881_p2 <= std_logic_vector(unsigned(add_ln703_7_fu_875_p2) + unsigned(add_ln703_5_fu_863_p2));
    add_ln703_9_fu_887_p2 <= std_logic_vector(unsigned(add_ln703_8_fu_881_p2) + unsigned(add_ln703_3_fu_853_p2));
    add_ln703_fu_835_p0 <= exp_table1_q7;
    add_ln703_fu_835_p1 <= exp_table1_q8;
    add_ln703_fu_835_p2 <= std_logic_vector(signed(add_ln703_fu_835_p0) + signed(add_ln703_fu_835_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to2)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to2 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return_0 <= mul_ln703_fu_1163_p2;
    ap_return_1 <= mul_ln703_1_fu_1170_p2;
    ap_return_10 <= mul_ln703_10_fu_1233_p2;
    ap_return_11 <= mul_ln703_11_fu_1240_p2;
    ap_return_12 <= mul_ln703_12_fu_1247_p2;
    ap_return_13 <= mul_ln703_13_fu_1254_p2;
    ap_return_14 <= mul_ln703_14_fu_1261_p2;
    ap_return_15 <= mul_ln703_15_fu_1268_p2;
    ap_return_16 <= mul_ln703_16_fu_1275_p2;
    ap_return_17 <= mul_ln703_17_fu_1282_p2;
    ap_return_18 <= mul_ln703_18_fu_1289_p2;
    ap_return_19 <= mul_ln703_19_fu_1296_p2;
    ap_return_2 <= mul_ln703_2_fu_1177_p2;
    ap_return_20 <= mul_ln703_20_fu_1303_p2;
    ap_return_21 <= mul_ln703_21_fu_1310_p2;
    ap_return_22 <= mul_ln703_22_fu_1317_p2;
    ap_return_3 <= mul_ln703_3_fu_1184_p2;
    ap_return_4 <= mul_ln703_4_fu_1191_p2;
    ap_return_5 <= mul_ln703_5_fu_1198_p2;
    ap_return_6 <= mul_ln703_6_fu_1205_p2;
    ap_return_7 <= mul_ln703_7_fu_1212_p2;
    ap_return_8 <= mul_ln703_8_fu_1219_p2;
    ap_return_9 <= mul_ln703_9_fu_1226_p2;
    exp_sum_V_fu_954_p2 <= std_logic_vector(unsigned(add_ln703_20_fu_948_p2) + unsigned(add_ln703_9_fu_887_p2));
    exp_table1_address0 <= zext_ln251_4_fu_556_p1(10 - 1 downto 0);
    exp_table1_address1 <= zext_ln251_5_fu_571_p1(10 - 1 downto 0);
    exp_table1_address10 <= zext_ln251_3_fu_783_p1(10 - 1 downto 0);
    exp_table1_address11 <= zext_ln251_6_fu_787_p1(10 - 1 downto 0);
    exp_table1_address12 <= zext_ln251_7_fu_791_p1(10 - 1 downto 0);
    exp_table1_address13 <= zext_ln251_8_fu_795_p1(10 - 1 downto 0);
    exp_table1_address14 <= zext_ln251_9_fu_799_p1(10 - 1 downto 0);
    exp_table1_address15 <= zext_ln251_10_fu_803_p1(10 - 1 downto 0);
    exp_table1_address16 <= zext_ln251_11_fu_807_p1(10 - 1 downto 0);
    exp_table1_address17 <= zext_ln251_12_fu_811_p1(10 - 1 downto 0);
    exp_table1_address18 <= zext_ln251_13_fu_815_p1(10 - 1 downto 0);
    exp_table1_address19 <= zext_ln251_14_fu_819_p1(10 - 1 downto 0);
    exp_table1_address2 <= zext_ln251_16_fu_686_p1(10 - 1 downto 0);
    exp_table1_address20 <= zext_ln251_15_fu_823_p1(10 - 1 downto 0);
    exp_table1_address21 <= zext_ln251_21_fu_827_p1(10 - 1 downto 0);
    exp_table1_address22 <= zext_ln251_22_fu_831_p1(10 - 1 downto 0);
    exp_table1_address3 <= zext_ln251_17_fu_701_p1(10 - 1 downto 0);
    exp_table1_address4 <= zext_ln251_18_fu_716_p1(10 - 1 downto 0);
    exp_table1_address5 <= zext_ln251_19_fu_731_p1(10 - 1 downto 0);
    exp_table1_address6 <= zext_ln251_20_fu_746_p1(10 - 1 downto 0);
    exp_table1_address7 <= zext_ln251_fu_771_p1(10 - 1 downto 0);
    exp_table1_address8 <= zext_ln251_1_fu_775_p1(10 - 1 downto 0);
    exp_table1_address9 <= zext_ln251_2_fu_779_p1(10 - 1 downto 0);

    exp_table1_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce0 <= ap_const_logic_1;
        else 
            exp_table1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce1_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce1 <= ap_const_logic_1;
        else 
            exp_table1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce10_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce10 <= ap_const_logic_1;
        else 
            exp_table1_ce10 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce11_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce11 <= ap_const_logic_1;
        else 
            exp_table1_ce11 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce12_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce12 <= ap_const_logic_1;
        else 
            exp_table1_ce12 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce13_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce13 <= ap_const_logic_1;
        else 
            exp_table1_ce13 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce14_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce14 <= ap_const_logic_1;
        else 
            exp_table1_ce14 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce15_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce15 <= ap_const_logic_1;
        else 
            exp_table1_ce15 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce16_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce16 <= ap_const_logic_1;
        else 
            exp_table1_ce16 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce17_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce17 <= ap_const_logic_1;
        else 
            exp_table1_ce17 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce18_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce18 <= ap_const_logic_1;
        else 
            exp_table1_ce18 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce19_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce19 <= ap_const_logic_1;
        else 
            exp_table1_ce19 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce2_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce2 <= ap_const_logic_1;
        else 
            exp_table1_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce20_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce20 <= ap_const_logic_1;
        else 
            exp_table1_ce20 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce21_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce21 <= ap_const_logic_1;
        else 
            exp_table1_ce21 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce22_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce22 <= ap_const_logic_1;
        else 
            exp_table1_ce22 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce3_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce3 <= ap_const_logic_1;
        else 
            exp_table1_ce3 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce4_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce4 <= ap_const_logic_1;
        else 
            exp_table1_ce4 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce5_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce5 <= ap_const_logic_1;
        else 
            exp_table1_ce5 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce6_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce6 <= ap_const_logic_1;
        else 
            exp_table1_ce6 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce7_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce7 <= ap_const_logic_1;
        else 
            exp_table1_ce7 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce8_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce8 <= ap_const_logic_1;
        else 
            exp_table1_ce8 <= ap_const_logic_0;
        end if; 
    end process;


    exp_table1_ce9_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            exp_table1_ce9 <= ap_const_logic_1;
        else 
            exp_table1_ce9 <= ap_const_logic_0;
        end if; 
    end process;

    invert_table2_address0 <= zext_ln259_fu_970_p1(10 - 1 downto 0);

    invert_table2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            invert_table2_ce0 <= ap_const_logic_1;
        else 
            invert_table2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln703_10_fu_1233_p0 <= sext_ln703_fu_975_p1(18 - 1 downto 0);
    mul_ln703_11_fu_1240_p0 <= sext_ln703_fu_975_p1(18 - 1 downto 0);
    mul_ln703_12_fu_1247_p0 <= sext_ln703_fu_975_p1(18 - 1 downto 0);
    mul_ln703_13_fu_1254_p0 <= sext_ln703_fu_975_p1(18 - 1 downto 0);
    mul_ln703_14_fu_1261_p0 <= sext_ln703_fu_975_p1(18 - 1 downto 0);
    mul_ln703_15_fu_1268_p0 <= sext_ln703_fu_975_p1(18 - 1 downto 0);
    mul_ln703_16_fu_1275_p0 <= sext_ln703_fu_975_p1(18 - 1 downto 0);
    mul_ln703_17_fu_1282_p0 <= sext_ln703_fu_975_p1(18 - 1 downto 0);
    mul_ln703_18_fu_1289_p0 <= sext_ln703_fu_975_p1(18 - 1 downto 0);
    mul_ln703_19_fu_1296_p0 <= sext_ln703_fu_975_p1(18 - 1 downto 0);
    mul_ln703_1_fu_1170_p0 <= sext_ln703_fu_975_p1(18 - 1 downto 0);
    mul_ln703_20_fu_1303_p0 <= sext_ln703_fu_975_p1(18 - 1 downto 0);
    mul_ln703_21_fu_1310_p0 <= sext_ln703_fu_975_p1(18 - 1 downto 0);
    mul_ln703_22_fu_1317_p0 <= sext_ln703_fu_975_p1(18 - 1 downto 0);
    mul_ln703_2_fu_1177_p0 <= sext_ln703_fu_975_p1(18 - 1 downto 0);
    mul_ln703_3_fu_1184_p0 <= sext_ln703_fu_975_p1(18 - 1 downto 0);
    mul_ln703_4_fu_1191_p0 <= sext_ln703_fu_975_p1(18 - 1 downto 0);
    mul_ln703_5_fu_1198_p0 <= sext_ln703_fu_975_p1(18 - 1 downto 0);
    mul_ln703_6_fu_1205_p0 <= sext_ln703_fu_975_p1(18 - 1 downto 0);
    mul_ln703_7_fu_1212_p0 <= sext_ln703_fu_975_p1(18 - 1 downto 0);
    mul_ln703_8_fu_1219_p0 <= sext_ln703_fu_975_p1(18 - 1 downto 0);
    mul_ln703_9_fu_1226_p0 <= sext_ln703_fu_975_p1(18 - 1 downto 0);
    mul_ln703_fu_1163_p0 <= sext_ln703_fu_975_p1(18 - 1 downto 0);
        sext_ln703_fu_975_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(invert_table2_q0),34));

    y_V_16_fu_676_p4 <= data_16_V_read(15 downto 6);
    y_V_17_fu_691_p4 <= data_17_V_read(15 downto 6);
    y_V_18_fu_706_p4 <= data_18_V_read(15 downto 6);
    y_V_19_fu_721_p4 <= data_19_V_read(15 downto 6);
    y_V_20_fu_736_p4 <= data_20_V_read(15 downto 6);
    y_V_23_fu_960_p4 <= exp_sum_V_fu_954_p2(17 downto 8);
    y_V_4_fu_546_p4 <= data_4_V_read(15 downto 6);
    y_V_5_fu_561_p4 <= data_5_V_read(15 downto 6);
    zext_ln251_10_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_10_reg_1374),64));
    zext_ln251_11_fu_807_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_11_reg_1379),64));
    zext_ln251_12_fu_811_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_12_reg_1384),64));
    zext_ln251_13_fu_815_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_13_reg_1389),64));
    zext_ln251_14_fu_819_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_14_reg_1394),64));
    zext_ln251_15_fu_823_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_15_reg_1399),64));
    zext_ln251_16_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_16_fu_676_p4),64));
    zext_ln251_17_fu_701_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_17_fu_691_p4),64));
    zext_ln251_18_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_18_fu_706_p4),64));
    zext_ln251_19_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_19_fu_721_p4),64));
    zext_ln251_1_fu_775_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_1_reg_1329),64));
    zext_ln251_20_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_20_fu_736_p4),64));
    zext_ln251_21_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_21_reg_1429),64));
    zext_ln251_22_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_22_reg_1434),64));
    zext_ln251_2_fu_779_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_2_reg_1334),64));
    zext_ln251_3_fu_783_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_3_reg_1339),64));
    zext_ln251_4_fu_556_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_4_fu_546_p4),64));
    zext_ln251_5_fu_571_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_5_fu_561_p4),64));
    zext_ln251_6_fu_787_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_6_reg_1354),64));
    zext_ln251_7_fu_791_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_7_reg_1359),64));
    zext_ln251_8_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_8_reg_1364),64));
    zext_ln251_9_fu_799_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_9_reg_1369),64));
    zext_ln251_fu_771_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_reg_1324),64));
    zext_ln259_fu_970_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_V_23_fu_960_p4),64));
end behav;
