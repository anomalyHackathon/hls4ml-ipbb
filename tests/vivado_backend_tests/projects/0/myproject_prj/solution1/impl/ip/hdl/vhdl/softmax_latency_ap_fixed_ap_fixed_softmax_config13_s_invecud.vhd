-- ==============================================================
-- Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC v2020.1 (64-bit)
-- Copyright 1986-2020 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity softmax_latency_ap_fixed_ap_fixed_softmax_config13_s_invecud_rom is 
    generic(
             DWIDTH     : integer := 18; 
             AWIDTH     : integer := 10; 
             MEM_SIZE    : integer := 1024
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of softmax_latency_ap_fixed_ap_fixed_softmax_config13_s_invecud_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "011111111111111111", 1 => "000001000000000000", 
    2 => "000000100000000000", 3 => "000000010101010101", 
    4 => "000000010000000000", 5 => "000000001100110011", 
    6 => "000000001010101011", 7 => "000000001001001001", 
    8 => "000000001000000000", 9 => "000000000111000111", 
    10 => "000000000110011010", 11 => "000000000101110100", 
    12 => "000000000101010101", 13 => "000000000100111011", 
    14 => "000000000100100101", 15 => "000000000100010001", 
    16 => "000000000100000000", 17 => "000000000011110001", 
    18 => "000000000011100100", 19 => "000000000011011000", 
    20 => "000000000011001101", 21 => "000000000011000011", 
    22 => "000000000010111010", 23 => "000000000010110010", 
    24 => "000000000010101011", 25 => "000000000010100100", 
    26 => "000000000010011110", 27 => "000000000010011000", 
    28 => "000000000010010010", 29 => "000000000010001101", 
    30 => "000000000010001001", 31 => "000000000010000100", 
    32 => "000000000010000000", 33 => "000000000001111100", 
    34 => "000000000001111000", 35 => "000000000001110101", 
    36 => "000000000001110010", 37 => "000000000001101111", 
    38 => "000000000001101100", 39 => "000000000001101001", 
    40 => "000000000001100110", 41 => "000000000001100100", 
    42 => "000000000001100010", 43 => "000000000001011111", 
    44 => "000000000001011101", 45 => "000000000001011011", 
    46 => "000000000001011001", 47 => "000000000001010111", 
    48 => "000000000001010101", 49 => "000000000001010100", 
    50 => "000000000001010010", 51 => "000000000001010000", 
    52 => "000000000001001111", 53 => "000000000001001101", 
    54 => "000000000001001100", 55 => "000000000001001010", 
    56 => "000000000001001001", 57 => "000000000001001000", 
    58 => "000000000001000111", 59 => "000000000001000101", 
    60 => "000000000001000100", 61 => "000000000001000011", 
    62 => "000000000001000010", 63 => "000000000001000001", 
    64 => "000000000001000000", 65 => "000000000000111111", 
    66 => "000000000000111110", 67 => "000000000000111101", 
    68 => "000000000000111100", 69 to 70=> "000000000000111011", 
    71 => "000000000000111010", 72 => "000000000000111001", 
    73 => "000000000000111000", 74 to 75=> "000000000000110111", 
    76 => "000000000000110110", 77 to 78=> "000000000000110101", 
    79 => "000000000000110100", 80 to 81=> "000000000000110011", 
    82 => "000000000000110010", 83 to 84=> "000000000000110001", 
    85 to 86=> "000000000000110000", 87 to 88=> "000000000000101111", 
    89 to 90=> "000000000000101110", 91 to 92=> "000000000000101101", 
    93 to 94=> "000000000000101100", 95 to 96=> "000000000000101011", 
    97 to 98=> "000000000000101010", 99 to 101=> "000000000000101001", 
    102 to 103=> "000000000000101000", 104 to 106=> "000000000000100111", 
    107 to 109=> "000000000000100110", 110 to 112=> "000000000000100101", 
    113 to 115=> "000000000000100100", 116 to 118=> "000000000000100011", 
    119 to 122=> "000000000000100010", 123 to 126=> "000000000000100001", 
    127 to 130=> "000000000000100000", 131 to 134=> "000000000000011111", 
    135 to 138=> "000000000000011110", 139 to 143=> "000000000000011101", 
    144 to 148=> "000000000000011100", 149 to 154=> "000000000000011011", 
    155 to 160=> "000000000000011010", 161 to 167=> "000000000000011001", 
    168 to 174=> "000000000000011000", 175 to 182=> "000000000000010111", 
    183 to 190=> "000000000000010110", 191 to 199=> "000000000000010101", 
    200 to 210=> "000000000000010100", 211 to 221=> "000000000000010011", 
    222 to 234=> "000000000000010010", 235 to 248=> "000000000000010001", 
    249 to 264=> "000000000000010000", 265 to 282=> "000000000000001111", 
    283 to 303=> "000000000000001110", 304 to 327=> "000000000000001101", 
    328 to 356=> "000000000000001100", 357 to 390=> "000000000000001011", 
    391 to 431=> "000000000000001010", 432 to 481=> "000000000000001001", 
    482 to 511=> "000000000000001000", 512 to 542=> "111111111111111000", 
    543 to 592=> "111111111111110111", 593 to 633=> "111111111111110110", 
    634 to 667=> "111111111111110101", 668 to 696=> "111111111111110100", 
    697 to 720=> "111111111111110011", 721 to 741=> "111111111111110010", 
    742 to 759=> "111111111111110001", 760 to 775=> "111111111111110000", 
    776 to 789=> "111111111111101111", 790 to 802=> "111111111111101110", 
    803 to 813=> "111111111111101101", 814 to 824=> "111111111111101100", 
    825 to 833=> "111111111111101011", 834 to 841=> "111111111111101010", 
    842 to 849=> "111111111111101001", 850 to 856=> "111111111111101000", 
    857 to 863=> "111111111111100111", 864 to 869=> "111111111111100110", 
    870 to 875=> "111111111111100101", 876 to 880=> "111111111111100100", 
    881 to 885=> "111111111111100011", 886 to 889=> "111111111111100010", 
    890 to 893=> "111111111111100001", 894 to 897=> "111111111111100000", 
    898 to 901=> "111111111111011111", 902 to 905=> "111111111111011110", 
    906 to 908=> "111111111111011101", 909 to 911=> "111111111111011100", 
    912 to 914=> "111111111111011011", 915 to 917=> "111111111111011010", 
    918 to 920=> "111111111111011001", 921 to 922=> "111111111111011000", 
    923 to 925=> "111111111111010111", 926 to 927=> "111111111111010110", 
    928 to 929=> "111111111111010101", 930 to 931=> "111111111111010100", 
    932 to 933=> "111111111111010011", 934 to 935=> "111111111111010010", 
    936 to 937=> "111111111111010001", 938 to 939=> "111111111111010000", 
    940 to 941=> "111111111111001111", 942 => "111111111111001110", 
    943 to 944=> "111111111111001101", 945 => "111111111111001100", 
    946 to 947=> "111111111111001011", 948 => "111111111111001010", 
    949 to 950=> "111111111111001001", 951 => "111111111111001000", 
    952 => "111111111111000111", 953 => "111111111111000110", 
    954 to 955=> "111111111111000101", 956 => "111111111111000100", 
    957 => "111111111111000011", 958 => "111111111111000010", 
    959 => "111111111111000001", 960 => "111111111111000000", 
    961 => "111111111110111111", 962 => "111111111110111110", 
    963 => "111111111110111101", 964 => "111111111110111100", 
    965 => "111111111110111011", 966 => "111111111110111001", 
    967 => "111111111110111000", 968 => "111111111110110111", 
    969 => "111111111110110110", 970 => "111111111110110100", 
    971 => "111111111110110011", 972 => "111111111110110001", 
    973 => "111111111110110000", 974 => "111111111110101110", 
    975 => "111111111110101100", 976 => "111111111110101011", 
    977 => "111111111110101001", 978 => "111111111110100111", 
    979 => "111111111110100101", 980 => "111111111110100011", 
    981 => "111111111110100001", 982 => "111111111110011110", 
    983 => "111111111110011100", 984 => "111111111110011010", 
    985 => "111111111110010111", 986 => "111111111110010100", 
    987 => "111111111110010001", 988 => "111111111110001110", 
    989 => "111111111110001011", 990 => "111111111110001000", 
    991 => "111111111110000100", 992 => "111111111110000000", 
    993 => "111111111101111100", 994 => "111111111101110111", 
    995 => "111111111101110011", 996 => "111111111101101110", 
    997 => "111111111101101000", 998 => "111111111101100010", 
    999 => "111111111101011100", 1000 => "111111111101010101", 
    1001 => "111111111101001110", 1002 => "111111111101000110", 
    1003 => "111111111100111101", 1004 => "111111111100110011", 
    1005 => "111111111100101000", 1006 => "111111111100011100", 
    1007 => "111111111100001111", 1008 => "111111111100000000", 
    1009 => "111111111011101111", 1010 => "111111111011011011", 
    1011 => "111111111011000101", 1012 => "111111111010101011", 
    1013 => "111111111010001100", 1014 => "111111111001100110", 
    1015 => "111111111000111001", 1016 => "111111111000000000", 
    1017 => "111111110110110111", 1018 => "111111110101010101", 
    1019 => "111111110011001101", 1020 => "111111110000000000", 
    1021 => "111111101010101011", 1022 => "111111100000000000", 
    1023 => "111111000000000000" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;

Library IEEE;
use IEEE.std_logic_1164.all;

entity softmax_latency_ap_fixed_ap_fixed_softmax_config13_s_invecud is
    generic (
        DataWidth : INTEGER := 18;
        AddressRange : INTEGER := 1024;
        AddressWidth : INTEGER := 10);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of softmax_latency_ap_fixed_ap_fixed_softmax_config13_s_invecud is
    component softmax_latency_ap_fixed_ap_fixed_softmax_config13_s_invecud_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    softmax_latency_ap_fixed_ap_fixed_softmax_config13_s_invecud_rom_U :  component softmax_latency_ap_fixed_ap_fixed_softmax_config13_s_invecud_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


